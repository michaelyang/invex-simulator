{"version":3,"sources":["Charts.js","App.js","serviceWorker.js","index.js"],"names":["i","marketReturnByMonth","Typography","Title","strategyReturnByMonth","console","log","r12MarketData","length","yearData","slice","month","cumulativeSum","simulatedData","trial","push","r12StrategyReturnData","Charts","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iMA+OIA,E,0EAxOEC,GAFYC,IAAVC,MAEoB,CAC1B,kBACC,iBACD,iBACA,kBACC,kBACA,iBACD,kBACC,iBACA,iBACD,kBACC,kBACA,iBACD,iBACA,kBACC,kBACA,kBACA,iBACD,iBACA,iBACA,iBACA,kBACC,iBACD,iBACA,kBACC,iBACD,kBACC,kBACA,iBACD,kBACC,iBACD,iBACA,iBACA,iBACA,iBACA,kBACC,kBACA,iBACD,kBACC,kBACA,iBACD,iBACA,iBACA,kBACC,kBACA,kBACA,iBACD,kBACC,iBACD,iBACA,iBACA,iBACA,kBACC,kBACA,iBACA,kBACA,iBACD,iBACA,kBACC,iBACA,kBACA,iBACD,iBACA,kBACC,iBACA,iBACD,gBACA,iBACA,iBACA,kBACC,kBACA,iBACD,iBACA,iBACA,iBACA,gBACA,gBACA,iBACA,iBACA,kBACC,iBACD,iBACA,kBACC,kBACA,iBACD,kBACC,iBACD,iBACA,kBACC,kBACA,kBACA,iBACD,iBACA,kBACC,iBACD,kBACC,iBACD,kBACC,kBACA,iBACD,kBACC,gBACD,kBACC,kBACA,iBACD,iBACA,iBACA,iBACA,iBACC,kBACA,iBACA,iBACD,mBAGIC,EAAwB,EAC3B,iBACD,UACA,kBACC,iBACD,UACA,iBACA,iBACA,YACC,UACD,UACA,SACA,kBACC,kBACA,WACA,iBACD,iBACA,iBACA,iBACA,WACC,iBACD,UACA,WACC,UACD,iBACA,kBACC,kBACA,iBACD,kBACC,UACD,aACC,UACD,iBACA,kBACC,iBACD,WACA,iBACA,WACC,QACD,WACA,iBACA,kBACC,WACA,kBACA,QACD,iBACA,kBACC,iBACD,kBACC,UACD,iBACA,WACC,WACD,iBACA,iBACA,iBACA,kBACC,WACD,iBACA,iBACA,iBACA,UACA,kBACC,WACD,kBACC,iBACD,YACC,iBACD,kBACC,iBACD,kBACC,WACD,UACA,kBACC,kBACA,WACA,iBACD,YACC,WACA,iBACD,SACC,iBACD,iBACA,kBACC,WACA,iBACD,YACC,kBACA,iBACD,iBACA,kBACC,YACA,iBACD,iBACA,aACC,kBACA,iBACD,kBACC,iBACD,kBACC,UACD,WACC,YACA,gBACD,UACA,iBACA,kBACC,UACD,kBACC,iBACD,iBACA,UACA,WAGFC,QAAQC,IAAIL,GAGZ,IAAIM,EAAgB,GACpB,IAAKP,EAAI,EAAGA,GAAKC,EAAoBO,OAAS,GAAIR,IAAK,CACrD,IAAMS,EAAWR,EAAoBS,MAAMV,EAAGA,EAAI,IAC9CW,OAAK,EACLC,EAAgB,EAChBC,EAAgB,GACpB,IAAKF,EAAQ,EAAGA,GAAS,GAAIA,IACd,GAATA,IACFC,GAAiBH,EAASE,EAAQ,IAEpCE,GAAiB,CAAEC,MAAOd,EAAGW,QAAOC,iBAEtCL,EAAcQ,KAAd,MAAAR,EAAa,YAASM,IAExBR,QAAQC,IAAIC,GAEZF,QAAQC,IAAIF,GACZ,IAAIY,EAAwB,GAC5B,IAAKhB,EAAI,EAAGA,GAAKI,EAAsBI,OAAS,GAAIR,IAClDgB,EAAsBD,KAAKX,EAAsBM,MAAMV,EAAGA,EAAI,KAEhEK,QAAQC,IAAIU,GAEZ,IAEeC,EAFA,kBAAM,sCClQbd,EAAUD,IAAVC,MASOe,EAPH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,kBACA,kBAAC,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.00d3c467.chunk.js","sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport './App.css';\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst marketReturnByMonth = [\n  711678.159224191,\n  -6180168.88528341,\n  8300453.55654705,\n  4247944.24573182,\n  -2813525.57247692,\n  -2798775.76606804,\n  715365.610826373,\n  -12887643.349681,\n  -4332755.63258232,\n  7179468.26947896,\n  -3204395.44230978,\n  -1146797.44828346,\n  6939783.91533609,\n  3772262.98904833,\n  -202809.838120878,\n  -822301.707290098,\n  -7485526.75246137,\n  313433.386186764,\n  1910099.92993847,\n  176997.676905498,\n  4399129.76142184,\n  -4539252.92230542,\n  1500792.80209444,\n  3565765.69932522,\n  -2157159.18728568,\n  3665326.89258447,\n  -1703602.64021535,\n  -2828275.37888564,\n  2120284.67126368,\n  -7079907.07621965,\n  2109222.31645709,\n  1382794.35082413,\n  3381393.11921525,\n  2212470.96131863,\n  980862.126184568,\n  -1965411.70397142,\n  -4185257.56849442,\n  2035473.28441316,\n  -110623.548065946,\n  -1025111.54541101,\n  1699915.18861321,\n  228621.999336228,\n  3362955.86120436,\n  -1574541.83413844,\n  -3185958.18429889,\n  -2330469.41258897,\n  1198421.77071425,\n  -3558390.79612079,\n  2149784.28408125,\n  582617.353147283,\n  2146096.83247903,\n  3370330.76440878,\n  -2223533.31612524,\n  -2994210.7009846,\n  -2938898.92695156,\n  -4240569.34252737,\n  1441793.57645929,\n  4683063.53479107,\n  -1906412.4783362,\n  -1423356.31844832,\n  -3053209.92661974,\n  932925.255356014,\n  4141008.14926799,\n  -243371.80574511,\n  -578929.901545048,\n  188060.03171207,\n  2706589.47601312,\n  1987536.41358453,\n  228621.999336258,\n  -575242.449942872,\n  -615804.417567059,\n  2120284.67126369,\n  2979460.89457576,\n  726427.965632945,\n  3901323.7951252,\n  2422655.7026439,\n  6438290.49743715,\n  2614403.18595815,\n  1047236.25502412,\n  -2330469.41258895,\n  2946273.83015597,\n  6379291.27180202,\n  -3067959.73302849,\n  -188060.031712085,\n  3185958.18429886,\n  -7566650.68770964,\n  645304.030384585,\n  3300269.18396695,\n  -4660938.82517789,\n  -4152070.50407459,\n  -814926.804085732,\n  966112.319775775,\n  162247.870496675,\n  -13459198.3480216,\n  2706589.47601318,\n  -3455142.15125929,\n  8816696.78085473,\n  -770677.384859368,\n  -2699214.57280871,\n  3112209.15225488,\n  -7754710.7194218,\n  5018621.63059103,\n  -4115195.98805264,\n  -2706589.47601308,\n  5365242.08119771,\n  837051.513698891,\n  353995.353810951,\n  6264980.2721339,\n  -3407205.28043072,\n  -6087982.5952284,\n  -11504848.9988568,\n  7865334.26748765,\n];\n\nconst strategyReturnByMonth = [\n  -592084.300000005,\n  3874327.4,\n  95150.6499999877,\n  -2453238.55000001,\n  3469412.5,\n  2199036.70000001,\n  2200909.69999999,\n  7825986.25,\n  -171264.45,\n  2177888.7,\n  654824.4,\n  541200.400000001,\n  -2395431.69999999,\n  -1113224.3,\n  -1998478.49999999,\n  2185826.10000001,\n  2870947.70000001,\n  175136.400000001,\n  4586061.7,\n  -222137.500000004,\n  2020288.4,\n  2697387.5,\n  -1456831.6,\n  3950071.80000002,\n  410034.750000006,\n  -938088.450000003,\n  -170422.200000003,\n  211550.549999993,\n  -2297021.6,\n  11112880.55,\n  -817434.85,\n  568168.400000007,\n  4729351.69999999,\n  -1373787.25000001,\n  4914324.15,\n  1696598.04999999,\n  4333006.9,\n  -1630958,\n  2414704.15,\n  461514.450000019,\n  683290.949999996,\n  -1722173.6,\n  -287025.400000004,\n  -2865882,\n  3812432.14999999,\n  6875424.24999999,\n  -1650002.29999999,\n  5086884.00000001,\n  -1556913.3,\n  502914.749999994,\n  225437.55,\n  -1602505.15,\n  687503.400000003,\n  2799862.80000001,\n  3480145.89999999,\n  2228132.30000001,\n  -2630421.25,\n  788730.800000005,\n  2955305.50000001,\n  3619821.00000001,\n  3064458.1,\n  583689.000000006,\n  -1252058.65,\n  1625361.54999999,\n  -82730.3000000031,\n  4056440.75,\n  -127587.799999997,\n  834651.900000005,\n  -876954.149999993,\n  2249986.29999999,\n  -2253829.45,\n  3113278.6,\n  2068362.19999999,\n  -475052.649999998,\n  -2641409.8,\n  -575184.700000004,\n  8761816.55,\n  -1889479.8,\n  -300154.299999983,\n  5490277,\n  -139742.400000009,\n  6673006.90000001,\n  52921.3999999967,\n  -2741635.9,\n  -1404992.80000002,\n  8690604.75,\n  -1210975.64999999,\n  -980818.349999986,\n  301607.949999999,\n  75795.7000000057,\n  -1937453.85,\n  -2097689.45000001,\n  796840.299999984,\n  20144322.25,\n  -343521.249999993,\n  -329426.600000006,\n  260484.100000006,\n  -899836.049999997,\n  1013085.75000001,\n  -1550511.5,\n  9343386.9,\n  -1544936.75,\n  -115620.74999998,\n  7610691.2,\n  4863848.19999998,\n  405607.599999991,\n  -1207960.2,\n  399106.600000006,\n  -1758425.30000001,\n  260252.300000003,\n  6394294.7,\n  1282377.6,\n];\n\nconsole.log(marketReturnByMonth);\n\nlet i;\nlet r12MarketData = [];\nfor (i = 0; i <= marketReturnByMonth.length - 12; i++) {\n  const yearData = marketReturnByMonth.slice(i, i + 12);\n  let month;\n  let cumulativeSum = 0;\n  let simulatedData = [];\n  for (month = 0; month <= 12; month++) {\n    if (month != 0) {\n      cumulativeSum += yearData[month - 1];\n    }\n    simulatedData += { trial: i, month, cumulativeSum };\n  }\n  r12MarketData.push(...simulatedData);\n}\nconsole.log(r12MarketData);\n\nconsole.log(strategyReturnByMonth);\nlet r12StrategyReturnData = [];\nfor (i = 0; i <= strategyReturnByMonth.length - 12; i++) {\n  r12StrategyReturnData.push(strategyReturnByMonth.slice(i, i + 12));\n}\nconsole.log(r12StrategyReturnData);\n\nconst Charts = () => <></>;\n\nexport default Charts;\n","import React from 'react';\nimport Charts from './Charts';\nimport './App.css';\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst App = () => (\n  <div className=\"App\">\n    <Title>Simulator</Title>\n    <Charts />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}